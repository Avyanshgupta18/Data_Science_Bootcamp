import pandas as pd

# ----------------------------
# STEP 1: Define the datasets
# ----------------------------

# SALES table
sales_data = {
    'Date': [
        '2023-03-18', '2023-03-18', '2023-03-18', '2023-01-15', '2023-01-20',
        '2023-01-22', '2022-07-10', '2022-08-12', '2022-12-25'
    ],
    'Order_id': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Item_id': [101, 102, 103, 101, 104, 105, 106, 107, 108],
    'Customer_id': [201, 202, 203, 204, 205, 206, 207, 208, 209],
    'Quantity': [2, 1, 3, 1, 2, 1, 1, 1, 1],
    'Revenue': [40, 20, 90, 20, 60, 30, 25, 15, 10]
}
sales_df = pd.DataFrame(sales_data)
sales_df['Date'] = pd.to_datetime(sales_df['Date'])

# ITEMS table
items_data = {
    'Item_id': [101, 102, 103, 104, 105, 106, 107, 108],
    'Item_name': ['Pen', 'Notebook', 'Bag', 'Bottle', 'Folder', 'Ruler', 'Pencil', 'Eraser'],
    'price': [20, 20, 30, 30, 30, 25, 15, 10],
    'department': ['Stationery', 'Stationery', 'Bags', 'Drinkware', 'Stationery', 'Stationery', 'Stationery', 'Stationery']
}
items_df = pd.DataFrame(items_data)

# CUSTOMERS table
customers_data = {
    'Customer_id': [201, 202, 203, 204, 205, 206, 207, 208, 209],
    'first_name': ['John', 'Jane', 'John', 'Alice', 'Bob', 'John', 'Doe', 'Mike', 'Sara'],
    'last_name': ['Doe', 'Smith', 'Cena', 'Wonder', 'Marley', 'Doe', 'Smith', 'Brown', 'Lee'],
    'Address': ['Addr1', 'Addr2', 'Addr3', 'Addr4', 'Addr5', 'Addr6', 'Addr7', 'Addr8', 'Addr9']
}
customers_df = pd.DataFrame(customers_data)

# ----------------------------
# STEP 2: Perform the analysis
# ----------------------------

# Merge the SALES and CUSTOMERS tables
sales_customers = pd.merge(sales_df, customers_df, on='Customer_id')

# Merge SALES and ITEMS tables
sales_items = pd.merge(sales_df, items_df, on='Item_id')

# Full merged data for complex queries
full_data = pd.merge(sales_customers, items_df, on='Item_id')

# 1. Total number of orders completed on 18th March 2023
orders_on_march_18 = sales_df[sales_df['Date'] == '2023-03-18']['Order_id'].nunique()
print("Total orders on 18th March 2023:", orders_on_march_18)

# 2. Orders completed on 18th March 2023 by John Doe
john_doe_orders = full_data[
    (full_data['Date'] == '2023-03-18') &
    (full_data['first_name'] == 'John') &
    (full_data['last_name'] == 'Doe')
]['Order_id'].nunique()
print("John Doe's orders on 18th March 2023:", john_doe_orders)

# 3. Customers that purchased in Jan 2023 and average spend
jan_sales = sales_df[
    (sales_df['Date'] >= '2023-01-01') &
    (sales_df['Date'] <= '2023-01-31')
]
jan_customers = jan_sales['Customer_id'].nunique()
jan_avg_spend = jan_sales.groupby('Customer_id')['Revenue'].sum().mean()
print("Total Jan 2023 customers:", jan_customers)
print("Average spend per customer in Jan 2023: $", round(jan_avg_spend, 2))

# 4. Departments that generated less than $600 in 2022
sales_2022 = sales_items[sales_items['Date'].dt.year == 2022]
revenue_by_department = sales_2022.groupby('department')['Revenue'].sum()
departments_below_600 = revenue_by_department[revenue_by_department < 600].index.tolist()
print("Departments with < $600 revenue in 2022:", departments_below_600)

# 5. Most and least revenue generated by a single order
revenue_per_order = sales_df.groupby('Order_id')['Revenue'].sum()
max_revenue = revenue_per_order.max()
min_revenue = revenue_per_order.min()
print("Max revenue from an order: $", max_revenue)
print("Min revenue from an order: $", min_revenue)

# 6. Orders that were purchased in the most lucrative order
most_lucrative_order_id = revenue_per_order.idxmax()
orders_in_most_lucrative = sales_df[sales_df['Order_id'] == most_lucrative_order_id]
print("Most lucrative order details:")
print(orders_in_most_lucrative)
